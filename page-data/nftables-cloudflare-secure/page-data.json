{"componentChunkName":"component---src-templates-blog-post-js","path":"/nftables-cloudflare-secure","result":{"data":{"post":{"excerpt":"nftables is still fairly new, fairly tricky to the uninitiated, and fairly  not present  on StackExchange sites... Since nothing I host everâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Securing Your Website with nftables and Cloudflare\",\n  \"slug\": \"nftables-cloudflare-secure\",\n  \"date\": \"2020-07-10T00:00:00.000Z\",\n  \"language\": \"en\",\n  \"<!-- cover\": \"./15300-star-map.jpg -->\",\n  \"generate-card\": true,\n  \"imageShare\": \"./social-media-card-generator-share.png\",\n  \"tags\": [\"nftables\", \"firewall\", \"cloudflare\", \"security\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"nftables is still fairly new, fairly tricky to the uninitiated, and fairly \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not present\"), \" on StackExchange sites\\u2026\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Since nothing I host ever touches our most frequently used communal computer virus (www) without layered security, here\\u2019s my documentation to hopefully save others the effort of redoing all this from scratch.\"), mdx(\"h2\", {\n    \"id\": \"cloudflare\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#cloudflare\",\n    \"aria-label\": \"cloudflare permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Cloudflare\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is pretty self-explanatory, and since Cloudflare has and updates their own great documentation, I\\u2019ll just post the links below here for reference. The nicest feature is being able to use Cloudflare\\u2019s own database of known bots, bad actors, and geoip\\u2019s to filter out visitors:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developers.cloudflare.com/firewall/cf-firewall-rules\"\n  }), \"Cloudflare Firewall\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The part that we really need for this example is the list of Cloudflare\\u2019s own IP blocks, for addition into our host firewall:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.cloudflare.com/ips/\"\n  }), \"IP Ranges\"))))), mdx(\"h3\", {\n    \"id\": \"note-unless-you-want-every-new-cve-to-give-attackers-root-access-to-your-site-use-one-trusted-application-allowed-to-run-with-root-permissions-and-forward-everything-else-here-our-trusted-app-is-nftables-and-any-other-webapps-eg-nodejs-will-run-unprivileged-on-their-own-higher-port-with-forwarding-from-ports-80-or-443\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#note-unless-you-want-every-new-cve-to-give-attackers-root-access-to-your-site-use-one-trusted-application-allowed-to-run-with-root-permissions-and-forward-everything-else-here-our-trusted-app-is-nftables-and-any-other-webapps-eg-nodejs-will-run-unprivileged-on-their-own-higher-port-with-forwarding-from-ports-80-or-443\",\n    \"aria-label\": \"note unless you want every new cve to give attackers root access to your site use one trusted application allowed to run with root permissions and forward everything else here our trusted app is nftables and any other webapps eg nodejs will run unprivileged on their own higher port with forwarding from ports 80 or 443 permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"\\uD83D\\uDC79Note: unless you want every new CVE to give attackers root access to your site, use \", mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"one\"), \" trusted application allowed to run with root permissions, and forward everything else. Here, our trusted app is nftables, and any other webapps (e.g. node.js) will run \", mdx(\"em\", {\n    parentName: \"h3\"\n  }, \"unprivileged\"), \" on their own higher port, with forwarding from ports 80 or 443.\"), mdx(\"h2\", {\n    \"id\": \"firewall-with-comments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#firewall-with-comments\",\n    \"aria-label\": \"firewall with comments permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Firewall (with comments)\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"table ip global4 {\\n        set cloudflare4 {\\n                type ipv4_addr\\n                flags constant,interval # CONSTANT, INTERVAL ALLOWS US TO SPECIFY BOTH SPECIFIC IP'S AND ALSO RANGES\\n                elements = { 103.21.244.0/22, 103.22.200.0/22,\\n                             103.31.4.0/22, 104.16.0.0/12,\\n                             108.162.192.0/18, 131.0.72.0/22,\\n                             141.101.64.0/18, 162.158.0.0/15,\\n                             172.64.0.0/13, 173.245.48.0/20,\\n                             188.114.96.0/20, 190.93.240.0/20,\\n                             197.234.240.0/22, 198.41.128.0/17 } # HERE WE ADD ALL CLOUDFLARE IPV4 CIDR ADDRESSES\\n        }\\n\\n        chain prenat {\\n                type nat hook prerouting priority -100; policy accept;\\n                tcp dport https redirect to :8080 # REDIRECT ALL HTTPS TRAFFIC TO THE PORT YOUR WEBAPP IS RUNNING ON\\n        }\\n\\n        chain input {\\n                type filter hook input priority -50; policy accept;\\n                log flags all\\n                    ip saddr @cloudflare4 accept\\n                tcp dport { domain, https } accept\\n                udp dport { domain } accept\\n                tcp sport { domain } accept\\n                udp sport { domain } accept\\n                ct state established,related accept\\n                meta l4proto { tcp, udp } ip daddr $your_public_ipv4 log drop # THIS DROPS ALL TCP+UDP THAT DIDN'T ALREADY MATCH\\n        }\\n\\n        chain postnat {\\n                type nat hook postrouting priority -100; policy accept;\\n        }\\n}\\ntable ip6 global6 {\\n        set cloudflare6 {\\n                type ipv6_addr\\n                flags constant,interval # CONSTANT, INTERVAL ALLOWS US TO SPECIFY BOTH SPECIFIC IP'S AND ALSO RANGES\\n                elements = { 2400:cb00::/32,\\n                             2405:8100::/32,\\n                             2405:b500::/32,\\n                             2606:4700::/32,\\n                             2803:f800::/32,\\n                             2a06:98c0::/29,\\n                             2c0f:f248::/32 } # HERE WE ADD ALL CLOUDFLARE IPV6 CIDR ADDRESSES\\n        }\\n\\n        chain prenat {\\n                type nat hook prerouting priority -100; policy accept;\\n                tcp dport https redirect to :8080 # REDIRECT ALL HTTPS TRAFFIC TO THE PORT YOUR WEBAPP IS RUNNING ON\\n        }\\n\\n        chain input {\\n                type filter hook input priority -50; policy accept;\\n                log flags all\\n                ip6 saddr @cloudflare6 accept\\n                tcp dport { domain, https } accept\\n                udp dport { domain } accept\\n                tcp sport { domain } accept\\n                udp sport { domain } accept\\n                ct state established,related accept\\n                meta l4proto { tcp, udp } ip6 daddr $your_public_ipv6 log drop # THIS DROPS ALL TCP+UDP THAT DIDN'T ALREADY MATCH\\n        }\\n\\n        chain postnat {\\n                type nat hook postrouting priority -100; policy accept;\\n        }\\n}\\ntable inet filter { # THIS TABLE IS NOT USED, BUT AVAILABLE AND WILL APPLY TO BOTH IPV4 AND IPV6. THE PRIORITY 0 EXECUTES IT AFTER ALL ABOVE\\n        chain input {\\n                type filter hook input priority 0; policy accept;\\n        }\\n\\n        chain forward {\\n                type filter hook forward priority 0; policy accept;\\n        }\\n\\n        chain output {\\n                type filter hook output priority 0; policy accept;\\n        }\\n}\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Securing Your Website with nftables and Cloudflare","date":"2020-07-10T00:00:00.000Z","slug":"nftables-cloudflare-secure","language":"en","tags":["nftables","firewall","cloudflare","security"],"cover":null,"imageShare":null,"translations":null}}},"pageContext":{"slug":"nftables-cloudflare-secure","previous":{"fileAbsolutePath":"/home/jovyan/content/posts/2020-06-28-btrfs-raspberry-pi/index.mdx","frontmatter":{"title":"Converting the Raspberry Pi rootfs to RAID1 btrfs on Ubuntu 20.04","slug":"ext4-btrfs-raspi-conversion","tags":["gatsby","ubuntu","btrfs"],"language":"en","cover":{"publicURL":"/static/b0da2248b1bc007273f727c44ff9c9cf/spirit_of_java_by_meganerid.jpg"},"unlisted":null},"timeToRead":3,"excerpt":"Many guides already exist for configuring a raspberry pi root partition to use btrfs, however there were a few circumstances that basicallyâ€¦"},"next":{"fileAbsolutePath":"/home/jovyan/content/posts/2020-12-13-squid-i2p-tor/index.mdx","frontmatter":{"title":"Configuring Squid Proxy for i2p & Tor Exit","slug":"squid-i2p-tor","tags":["nftables","firewall","cloudflare","security"],"language":"en","cover":null,"unlisted":null},"timeToRead":1,"excerpt":"How to pass thorugh squid proxy into the i2p and tor networks. Cloudflare"}}}}